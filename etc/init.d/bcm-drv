#!/sbin/openrc-run

description="Manages Broadcom wireless drivers based on detected hardware"

depend() {
	# Needs kernel modules and udev to be ready.
	need modules
	after udev
}

# --- Helper Functions ---

# Helper to load a driver and report status.
_modprobe_driver() {
	local driver=$1
	ebegin "Loading ${driver} driver"
	modprobe "${driver}"
	eend $? "Failed to load the ${driver} driver"
}

# Helper to unload all potentially conflicting drivers.
_remove_drivers() {
	ebegin "Unloading wireless modules"
	modprobe -r wl brcmsmac b43 b43legacy >/dev/null 2>&1
	eend 0
}

# --- Main Service Functions ---

start() {
	ebegin "Detecting Broadcom wireless chip"
	# The lspci check is the core of this script's logic.
	local chip_info
	chip_info=$(lspci -nn -d 14e4:)
	eend 0

	if [ -z "${chip_info}" ]; then
		einfo "No Broadcom wireless chip detected"
		return 0 # Exit cleanly if no relevant hardware is found
	fi

	# Ensure any old drivers are removed before loading the new one.
	_remove_drivers

	local driver_loaded=false
	case "${chip_info}" in
		*430[79]|*431[89]|*4322|*4350|*43a[9a]|*4321|*a8d[6b]|*a99d)
			_modprobe_driver b43 && driver_loaded=true
			;;
		*430[16]|*432[045])
			_modprobe_driver b43legacy && driver_loaded=true
			;;
		*0576|*a8d8)
			_modprobe_driver brcmsmac && driver_loaded=true
			;;
		*431[1235]|*432[89abcd]|*4331|*435[3789]|*4727|*43a0|*4365)
			_modprobe_driver wl && driver_loaded=true
			;;
		*4360|*43b1)
			eerror "No driver available for this Broadcom chip: ${chip_info}"
			return 1
			;;
		*)
			einfo "No specific driver rule for this Broadcom chip: ${chip_info}"
			return 0
			;;
	esac

	if ${driver_loaded}; then
		ebegin "Bringing up wireless interface wlan0"
		ip link set wlan0 up
		eend $? "Failed to bring up wlan0"
	fi
}

stop() {
	ebegin "Bringing down wireless interface wlan0"
	ip link set wlan0 down >/dev/null 2>&1
	eend 0
	_remove_drivers
}
