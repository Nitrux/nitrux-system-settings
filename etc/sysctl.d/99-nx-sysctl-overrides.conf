# Default values for sysctl in Nitrux
# sysctl.conf 2023-2024 (c) Nitrux Latinoamericana S.C.

###############################
# Sysctl overrides for Nitrux #
###############################

############################################################
#   ONLY EDIT THIS FILE IF YOU KNOW WHAT YOU ARE DOING!    #
#                                                          #
#   DO NOT EDIT /etc/sysctl.conf, PUT LOCAL CHANGES HERE!  #
#   AND PLEASE PUT A DESC. OF WHAT YOU CHANGE!             #
############################################################

#####################################
#   MEMORY MANAGEMENT AND CACHING   #
#####################################

# Discourage Linux from swapping idle processes to disk (default = 60).
# This control defines how aggressively the kernel swaps out anonymous memory relative to pagecache and other caches.
# Increasing the value increases the amount of swapping. 
vm.swappiness = 10

# Controls the tendency of the kernel to reclaim the memory used for caching VFS caches versus pagecache and swap. 
# Increasing this value increases the rate at which VFS caches are reclaimed.
vm.vfs_cache_pressure = 50

# Controls how aggressively the kernel performs memory compaction, rearranging memory pages to create larger contiguous blocks of free memory.
# Increasing the proactiveness of memory compaction can help reduce fragmentation and improve the availability of large contiguous blocks of memory, which is beneficial for allocating huge pages and avoiding out-of-memory situations. However, more frequent compaction activities can also increase CPU overhead.
vm.compaction_proactiveness = 0

# Control the "unfairness" of page locking, affecting how the kernel manages contention for memory pages that multiple processes try to lock.
# Enabling page lock unfairness can improve the performance of some workloads by allowing more aggressive locking behavior. Still, it can also lead to increased contention and potential performance degradation in other workloads. Disabling it provides more predictable and fair behavior at the cost of potentially reduced performance in some scenarios.
vm.page_lock_unfairness = 1

# This kernel parameter sets the maximum percentage of total system memory that can contain dirty data (modified data not yet written to disk). Once this threshold is reached, the kernel will start writing dirty pages to disk to free up memory.
vm.dirty_ratio = 15

# This parameter sets the percentage of total system memory that can contain dirty data before the kernel starts writing it to disk in the background.
vm.dirty_background_ratio = 5

# Write back dirty pages to disk every 15 seconds, and any page that has been dirty for at least 15 seconds will be considered for writeback. This configuration can help balance system performance (keeping data in memory longer) and data integrity (ensuring data is not kept in memory too long without being written to disk).
# TLP can override the value of dirty_writeback_centisecs see: https://linrunner.de/tlp/faq/powertop.html#why-does-powertop-suggest-more-power-saving-settings-with-tlp-already-running.
vm.dirty_writeback_centisecs = 1500
vm.dirty_expire_centisecs = 1500

# This controls the boost applied to the watermark (the minimum number of free pages the kernel tries to maintain) in the Linux memory management subsystem.
vm.watermark_boost_factor = 10

# This controls the scale factor for adjusting the low-memory watermarks. A higher value increases the free memory threshold before the system starts reclaiming memory.
vm.watermark_scale_factor = 200

# This defines the amount of memory (in bytes) that can be filled with "dirty" (modified but not yet written to disk) data before the system forces a flush to disk.
vm.dirty_bytes = 134217728

# This sets the threshold for the amount of dirty memory (in bytes) at which the kernel starts writing data to disk in the background.
vm.dirty_background_bytes = 67108864

# Prevent Kernel Panics & Improve Memory Handling. Ensures the system kills the process causing an OOM (Out-Of-Memory) condition instead of freezing.
vm.panic_on_oom = 0
vm.oom_kill_allocating_task = 1

# Controls the maximum number of memory map areas (VMAs) a process can allocate. It seems the Liquorix kernel uses 2147483642 by default, which is useful for workloads needing millions of mappings, but may increase kernel overhead (memory tracking costs).
# Set it to 16777216 to balance high memory mapping needs without excessive kernel overhead.
vm.max_map_count = 16777216

#################################
#   FILESYSTEM AND I/O SETTINGS #
#################################

# Asynchronous non-blocking I/O (AIO) is a feature that allows a process to initiate multiple I/O operations simultaneously without waiting for any of them to complete.
# This helps boost performance for applications that can overlap processing and I/O.
# Increasing this value increases the random IO performance. 
fs.aio-max-nr = 1048576

# Disable core dumps in Linux for processes that have elevated privileges via setuid, setgid, or capabilities.
fs.suid_dumpable = 0

# This setting increases the maximum number of file watches that the inotify system can use. 
fs.inotify.max_user_watches = 524288

#####################################
#   SECURITY AND KERNEL SETTINGS    #
#####################################

# Restricts access to kernel pointer addresses, improving security by preventing information leaks.
kernel.kptr_restrict = 1

# Disables the SysRq key for security reasons.
kernel.sysrq = 0

# Disables timer migration across CPUs. This can improve the consistency of CPU scheduling for real-time or latency-sensitive applications.
kernel.timer_migration = 0

# Disables the creation of core dump files for all processes on the system.
kernel.core_pattern = |/bin/false

# The NMI watchdog is a debugging feature that catches hardware hangs that cause a kernel panic. On some systems, it can generate a lot of interrupts, causing a noticeable increase in power usage.
nmi_watchdog = 0

# A split lock occurs when a CPU performs an atomic operation on a memory address spanning two cache lines. This type of operation is expensive because it requires the CPU to lock the entire bus or memory subsystem, impacting the whole system's performance.
# Disables split lock mitigation to improve performance.
kernel.split_lock_mitigate=0

#########################################################################
#   DISABLING UNPRIVILEGED USER NAMESPACES WILL BRAKE THE FOLLOWING:    #
#   WEB BROWSERS, WEBKITGTK, FLATPAK and GNOME THUMBNAILING.            #
#   ENABLED BY DEFAULT. DISABLE AT YOUR OWN RISK.                       #
#########################################################################

# Disable unprivileged user namespaces. Unprivileged user namespaces can make severe vulnerabilities in the Linux kernel much more easily exploitable.
# Numerous vulnerabilities that are found regularly are often only exploitable by unprivileged users if unprivileged user namespaces are supported and enabled by the kernel. Unprivileged user namespaces allow unprivileged users to access and exploit security bugs.
# user.max_user_namespaces = 0

#####################################
#   NETWORKING PERFORMANCE TUNING   #
#####################################

# Turn on BPF JIT hardening if the JIT is enabled.
# Enabling hardening for the Berkeley Packet Filter (BPF) Just-in-time (JIT) compiler aids in mitigating JIT spraying attacks. Setting the value to "2" enables JIT hardening for all users.
net.core.bpf_jit_harden = 2

# Increases the maximum number of packets queued for processing before they are dropped.
net.core.netdev_max_backlog = 16384

# Reuses Time-Wait TCP connections to reduce the number of open TCP connections and free up resources, improving system performance.
net.ipv4.tcp_tw_reuse = 1

# Increase Linux autotuning TCP buffer limits.
# Set max to 16MB for 1GE and 32M (33554432) or 54M (56623104) for 10GE.
# Don't set tcp_mem itself! Let the kernel scale it based on RAM.
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.core.rmem_default = 16777216
net.core.wmem_default = 16777216
net.core.optmem_max = 40960
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216

# The setting prevents certain kinds of IP spoofing attacks that are, for example, used for distributed denial-of-service (DDoS) attacks.
net.ipv4.conf.all.rp_filter = 1

# Enable IPv6 Privacy Extensions.
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2
net.ipv6.conf.nic.use_tempaddr = 2

# Prevents IP spoofing and bypassing security controls by disabling source routing.
net.ipv4.conf.default.accept_source_route = 0

# Defines the maximum amount of memory reserved for per-socket options. When an application sets TCP socket options (e.g., buffer sizes, timestamps, TCP_NODELAY), the kernel reserves a small buffer for them.
# 32KB (32768) is a safer balance between performance and memory usage.
net.core.optmem_max = 32768

# Helps prioritize interactive traffic over bulk downloads.
net.ipv4.tcp_low_latency = 1

# Prevents the kernel from storing old network conditions, avoiding outdated congestion control settings.
net.ipv4.tcp_no_metrics_save = 1

# Disables TCP timestamps, which can reduce packet overhead for low-latency gaming.
net.ipv4.tcp_timestamps = 0

# Prevents slow-start behavior after idle periods, keeping network performance high.
net.ipv4.tcp_slow_start_after_idle = 0

# Enables MTU (Maximum Transmission Unit) probing in the Linux TCP stack. his setting helps TCP dynamically discover the maximum packet size that can be transmitted without fragmentation when there are network issues caused by incorrect Path MTU Discovery (PMTUD).
net.ipv4.tcp_mtu_probing=1
