#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2025> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################


# Auto-generates an /etc/conf.d/irq-pin file by analyzing CPU topology.


# -- Exit on errors.

set -euo pipefail


# -- Configuration.
#   -- Add any other driver names you want to pin.

DEVICE_PATTERNS="amdgpu|nvidia|xhci_hcd|ehci_hcd|r8169|r8125|e1000e|igc|r8152|iwlwifi|rtw88|mt76|ath9k|ath10k|snd_hda_intel|snd_sof_pci|btusb"
CONFIG_FILE="/etc/conf.d/irq-pin"


# -- Functions.

normalize_to_kb() {
    local size_str
    size_str=$(cat "$1")
    case "$size_str" in
        *K) echo "${size_str%K}" ;;
        *M) echo "$((${size_str%M} * 1024))" ;;
        *) echo "$size_str" ;;
    esac
}

expand_list() {
    echo "$1" | tr ',' '\n' | while read -r range; do
        if [[ "$range" == *-* ]]; then
            # It's a range like "0-15", use seq
            seq "${range%-*}" "${range#*-*}"
        else
            # It's a single number like "8", just echo it
            echo "$range"
        fi
    done | LC_ALL=C sort
}

find_housekeeping_cores() {
    local ec="" ONLINE
    ONLINE="$(expand_list "$(cat /sys/devices/system/cpu/online)")"

    for p in /sys/devices/system/cpu/cpu[0-9]*; do
        local id s
        id="${p##*/cpu}"
        s="$(cat "$p/topology/thread_siblings_list" 2>/dev/null || true)"
        case "$s" in *","*|*"-"*) : ;; *)
            printf "%s\n" "$ONLINE" | grep -qx "$id" && ec="$ec $id"
            ;;
        esac
    done
    if [ -n "$ec" ]; then
        echo "Detected: Intel E-Cores (single-threaded)" >&2
        # shellcheck disable=SC2086
        printf "%s\n" $ec
        return
    fi

    local L3_INDEX_NAME=""
    for cache_dir in /sys/devices/system/cpu/cpu0/cache/index*; do
        [ -f "$cache_dir/level" ] && [ "$(cat "$cache_dir/level")" = 3 ] && { L3_INDEX_NAME="$(basename "$cache_dir")"; break; }
    done

    if [ -n "$L3_INDEX_NAME" ]; then
        local L3_SIZES_KB MIN_L3_SIZE_KB MAX_L3_SIZE_KB
        L3_SIZES_KB=$(for f in /sys/devices/system/cpu/cpu[0-9]*/cache/"$L3_INDEX_NAME"/size; do
            [ -f "$f" ] && normalize_to_kb "$f"
        done | LC_ALL=C sort -n -u)
        MIN_L3_SIZE_KB="$(printf "%s\n" "$L3_SIZES_KB" | head -n1)"
        MAX_L3_SIZE_KB="$(printf "%s\n" "$L3_SIZES_KB" | tail -n1)"
        if [ -n "$MIN_L3_SIZE_KB" ] && [ "$MIN_L3_SIZE_KB" != "$MAX_L3_SIZE_KB" ]; then
            echo "Detected: Asymmetric L3 cache (V-Cache/CCD)" >&2
            local cpu_list=()
            for p in /sys/devices/system/cpu/cpu[0-9]*; do
                local id size_kb f
                id="${p##*/cpu}"
                f="$p/cache/$L3_INDEX_NAME/size"
                if [ -f "$f" ]; then
                    size_kb="$(normalize_to_kb "$f")"
                    if [ "$size_kb" -eq "$MIN_L3_SIZE_KB" ] && printf "%s\n" "$ONLINE" | grep -qx "$id"; then
                        cpu_list+=("$id")
                    fi
                fi
            done
            printf "%s\n" "${cpu_list[@]}"
            return
        fi
    fi

    echo "Detected: Standard CPU (uniform topology)" >&2
    printf "%s\n" "$ONLINE" | tail -n1
}


# -- Check permissions.

if [ "$EUID" -ne 0 ]; then
  echo "This script must be run as root." >&2
  exit 1
fi


# -- Create temp file in the destination dir for atomic mv

TMP_FILE=$(mktemp "$CONFIG_FILE.XXXXXX")
trap 'rm -f "$TMP_FILE"' EXIT

echo "Starting IRQ pin configuration generator..."

TARGET_CPUS=()


# -- Step 1: Detecting housekeeping cores.

echo "Analyzing CPU topology..."
mapfile -t TARGET_CPUS < <(find_housekeeping_cores)

if [ ${#TARGET_CPUS[@]} -eq 0 ]; then
  echo "Error: Failed to find any target CPUs." >&2
  exit 1
fi


# -- Step 3: Select one core from the target list (the last one) and find its SMT siblings.

HOUSEKEEPING_CORE="${TARGET_CPUS[${#TARGET_CPUS[@]}-1]}"
SIBLINGS_FILE="/sys/devices/system/cpu/cpu$HOUSEKEEPING_CORE/topology/thread_siblings_list"

if [ ! -f "$SIBLINGS_FILE" ]; then
    echo "Error: Cannot find topology file: $SIBLINGS_FILE" >&2
    exit 1
fi

POTENTIAL_SIBLINGS=$(cat "$SIBLINGS_FILE")
ONLINE_CPUS=$(cat /sys/devices/system/cpu/online)

CPUSET=$(
    LC_ALL=C comm -12 \
    <(expand_list "$POTENTIAL_SIBLINGS") \
    <(expand_list "$ONLINE_CPUS") | \
    tr '\n' ',' | sed 's/,$//'
)

if [ -z "$CPUSET" ]; then
    echo "Error: No online CPUs found for the target housekeeping core $HOUSEKEEPING_CORE (Siblings: $POTENTIAL_SIBLINGS)." >&2
    exit 1
fi

echo "Selected housekeeping core(s): $CPUSET (Online Logical CPUs)"


# -- Step 4: Find all devices to pin using more robust extraction.

echo "Scanning /proc/interrupts for devices..."
DEVICES=$(
    awk -F'  +' '/^[ 0-9]+:/ {print $NF}' /proc/interrupts | \
    grep -Eo "$DEVICE_PATTERNS" | \
    sort -u | tr '\n' ',' | sed 's/,$//'
)

if [ -z "$DEVICES" ]; then
  echo "Warning: No devices found matching patterns. Config will be empty."
  DEVICES=""
fi
echo "Found devices: $DEVICES"


# -- Step 5: Write the config file.

echo "Writing configuration..."
{
  echo "# Auto-generated by $0 on $(date)"
  echo "#"
  echo "# Housekeeping CPUs (target for all IRQs): $CPUSET"
  echo ""
  echo "DEVICES=\"$DEVICES\""
  echo ""

  if [ -n "$DEVICES" ]; then
      for d in $(echo "$DEVICES" | tr ',' ' '); do
        echo "CPUSET_${d}=\"$CPUSET\""
      done
  fi
} > "$TMP_FILE"


# -- Step 6: Atomically move the temp file to the final destination.

mv "$TMP_FILE" "$CONFIG_FILE"

echo "Done. Generated $CONFIG_FILE. Enable and start the 'irq-pin' service."
