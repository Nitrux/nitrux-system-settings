#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023-2025> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                              #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################

set -eu


# -- Variables.

# xdg_config_path="/etc/skel/.config"
xdg_rc_path="/etc/xdg"
xdg_user_path="$HOME/.config"
xdg_session="$XDG_SESSION_TYPE"
desktop_config_log="$HOME/.desktop-config.log"
dist=$(grep -oP 'PRETTY_NAME=\K.*' /etc/os-release | tr -d '"')
vendor='Nitrux Latinoamericana S.C.'
fecha=$(date +%Y)
hora=$(date +%Y.%m.%d-%H.%M)


# -- Functions.

usage() {
    script_name=$(basename "$0")
    echo "NX Desktop is our set of applied customizations to the Plasma 5 Desktop."
    echo
    echo -e "(c) $fecha Some Rights Reserved. Made by $vendor"
    echo
    echo "Usage: $script_name [--restart-desktop] [--restart-wm-x11] [--show-window-titlebar] [--hide-window-titlebar] [--help]"
    echo
    echo "  --restart-desktop          Restart KDE Plasma"
    echo "  --restart-desktop-debug    Restart KDE Plasma and write the console output to a log file"
    echo "  --restart-wm-x11           Restart KWin X11"
    echo "  --show-window-titlebar     Show the window titlebar"
    echo "  --hide-window-titlebar     Don't show the window titlebar"
    echo "  --enable-double-click      Use double-click to open directories in Maui Apps (default)"
    echo "  --disable-double-click     Don't use double-click to open directories in Maui Apps"
    echo "  --help                     Display this help message"
}

cp_rc() {
    cp -rf "$@"
}

del() {
    rm -rf "$@"
}

get_gpu_manufacturer() {
    nvidia-smi -L | awk -F ' ' '$3=="NVIDIA"{print $3; exit}'
}

check_plasmashell_running() {
    pgrep -x plasmashell >/dev/null
}

check_kwin_x11_running() {
    pgrep -x kwin_x11 >/dev/null
}

check_log_file_size() {
    local max_size_kb=10240
    local log_file_size_kb

    if [ -f "$desktop_config_log" ]; then
        log_file_size_kb=$(du -k "$desktop_config_log" | cut -f1)
        if [ "$log_file_size_kb" -ge "$max_size_kb" ]; then
            echo "Log file size exceeded $max_size_kb KB, deleting..."
            rm -f "$desktop_config_log"
        fi
    fi
}


# -- Detect whether the session is X11 or Wayland and if it's running on NVIDIA or MESA.

main_script() { 
    ( 
        check_log_file_size
        echo ' ';
        echo "=========================="
        echo "NX Desktop logging started at $hora"
        echo ' ';
        echo -e "Welcome to $dist";
        echo ' ';
        echo -e "(c) $fecha Some Rights Reserved. Made by $vendor";
        echo ' ';

        if [ "${xdg_session}" == "wayland" ]; then
            echo "This is Wayland"
            if [ -f "$HOME/.nx-kwin-wayland-check" ]; then
                echo "Wayland first-run file exists"
                echo "Do nothing"
            else
                echo "Wayland first-run file does not exist"
                echo "Check if using NVIDIA or Mesa"
                
                if [ "$(get_gpu_manufacturer)" == "NVIDIA" ]; then
                    echo "Detected as NVIDIA on Wayland"
                    echo "Creating first run file for NVIDIA on Wayland" >> "$HOME/.nx-nvidia-kwin-wayland-check"
                    ln -sv "$HOME/.nx-nvidia-kwin-wayland-check" "$HOME/.nx-kwin-wayland-check"
                else
                    echo "Detected as MESA on Wayland"
                    echo "Creating first run file for MESA on Wayland" >> "$HOME/.nx-mesa-kwin-wayland-check"
                    ln -sv "$HOME/.nx-mesa-kwin-wayland-check" "$HOME/.nx-kwin-wayland-check"
                fi

                cp_rc "$xdg_rc_path/bak.breezerc.wayland" "$xdg_user_path/breezerc"
                cp_rc "$xdg_rc_path/bak.kwinrc.wayland" "$xdg_user_path/kwinrc"
                cp_rc "$xdg_rc_path/bak.kwinrulesrc.wayland" "$xdg_user_path/kwinrulesrc"
                del "$HOME/.nx-kwin-x11-check" || true
                sleep 2
                kwin_wayland --replace
                sleep 1
                nohup plasmashell --replace >/dev/null 2>&1 &
            fi
        else
            echo "This is not Wayland; it is X11"
            if [ -f "$HOME/.nx-kwin-x11-check" ]; then
                echo "X11 first-run file exists"
            else
                echo "X11 first-run file does not exist"
                echo "Detected as X11"
                echo "Creating X11 first-run file for X11" >> "$HOME/.nx-kwin-x11-check"
                cp_rc "$xdg_rc_path/bak.breezerc.x11" "$xdg_user_path/breezerc"
                cp_rc "$xdg_rc_path/bak.kwinrc.x11" "$xdg_user_path/kwinrc"
                cp_rc "$xdg_rc_path/bak.kwinrulesrc.x11" "$xdg_user_path/kwinrulesrc"
                del "$HOME/.nx-mesa-kwin-wayland-check" "$HOME/.nx-nvidia-kwin-wayland-check" "$HOME/.nx-kwin-wayland-check" || true
            fi
        fi


        # -- Manually start these Plasma services that, for some reason, don't autostart, even though they have files in /etc/xdg/autostart.

        if pgrep -f "/usr/lib/x86_64-linux-gnu/libexec/org_kde_powerdevil" >/dev/null; then
            echo "Powerdevil process is already running."
        else
            echo "Powerdevil process is not running. Starting it now..."
            nohup /usr/lib/x86_64-linux-gnu/libexec/org_kde_powerdevil >/dev/null 2>&1 &
        fi

        if pgrep -f "/usr/lib/x86_64-linux-gnu/libexec/polkit-kde-authentication-agent-1" >/dev/null; then
            echo "PolicyKit-Kde process is already running."
        else
            echo "PolicyKit-Kde process is not running. Starting it now..."
            nohup /usr/lib/x86_64-linux-gnu/libexec/polkit-kde-authentication-agent-1 >/dev/null 2>&1 &
        fi

        if pgrep -f "fcitx5" >/dev/null; then
            echo "Fcitx5 process is already running."
            sleep 2
        else
            echo "Fcitx5 process is not running. Starting it now..."
            fcitx5 > /dev/null 2>&1 &
        fi 

        if pgrep -f "plasma-hud" >/dev/null; then
            echo "plasma-hud process is already running."
        else
            echo "plasma-hud process is not running. Starting it now..."
            nohup /usr/lib/plasma-hud/plasma-hud >/dev/null 2>&1 &
        fi


        # -- Restart plasmashell again during the Live session if the Wayland session is running on NVIDIA hardware.
        # -- But, only do this during the Live session because who the hell knows why plasmashell crashes here but not after installation.

        if [ -f "$HOME/.nx-nvidia-kwin-wayland-check" ] && [ -f "/usr/bin/calamares" ]; then
            echo "Detected NVIDIA hardware with Wayland session in Live session. Restarting plasmashell again in 3 seconds..."
            sleep 2
            if check_plasmashell_running; then
                killall plasmashell
            fi
            nohup plasmashell --replace 2>&1 &
        fi


        # -- Display a notification if we're running in a VM because I'm genuinely tired of people equating performance in a VM to bare metal.

        if grep -q "EDK II" /var/log/syslog || grep -q "VMware, Inc" /var/log/syslog; then
            notify-send -a "System Message" -u critical --action=Understood -i "dialog-warning" "VM Detected" "Nitrux is running in a Virtual Machine. Performance will be severely affected."
        fi


        # -- Display a notification if we're running on a device with less than the minimum required hardware.
        # -- This distribution DOES NOT TARGET LOW-END HARDWARE!.

        TOTAL_RAM_MB=$(grep MemTotal /proc/meminfo | awk '{print $2 / 1024}')
        PHYSICAL_CORES=$(lscpu | grep "^Core(s) per socket:" | awk '{print $4}')
        THREADS=$(lscpu | grep "^CPU(s):" | awk '{print $2}')

        if (( $(echo "$TOTAL_RAM_MB < 4096" | bc -l) )) || (( PHYSICAL_CORES < 4 )) || (( THREADS < 4 )); then
            notify-send -a "System Message" -u critical --action=Understood -i "dialog-warning" "System Specs Warning" "This system has less than 4GB of RAM, fewer than 4 physical cores, or fewer than 4 threads. Performance may be limited."
        fi
    ) 2>&1 | tee -a "$desktop_config_log"
}


# -- Check for command-line arguments.

if [ $# -eq 0 ]; then
    echo "No arguments provided. The script will run normally."
    main_script
else
    case "$1" in
        --restart-desktop)
            echo "Restarting KDE Plasma..."
            if check_plasmashell_running; then
                killall plasmashell
            fi
            nohup plasmashell --replace > .restart_plasmashell.out 2>&1 &

            exit 0
            ;;
        --restart-desktop-debug)
            echo "Restarting KDE Plasma..."
            if check_plasmashell_running; then
                killall plasmashell
            fi
            nohup plasmashell --replace 2>&1 | tee -a "$desktop_config_log" &
            exit 0
            ;;
        --restart-wm-x11)
            echo "Checking for Wayland session..."
            if [ -f "$HOME/.nx-kwin-wayland-check" ]; then
                echo "KWin Wayland is detected. KWin X11 cannot be restarted in a Wayland session."
                exit 1
            else
                echo "Restarting KWin X11..."
                if check_kwin_x11_running; then
                    killall kwin_x11
                    nohup kwin_x11 --replace 2>&1 &
                    echo "KWin X11 restarted successfully."
                else
                    echo "KWin X11 is not running and cannot be restarted."
                fi
                exit 0
            fi
            ;;
        --show-window-titlebar)
            echo "Showing window titlebar..."
            sed -i 's/HideTitleBar=Always/HideTitleBar=Never/' "$HOME/.config/breezerc"
            echo "Reload KWin or change theme to apply changes..."
            exit 0
            ;;
        --hide-window-titlebar)
            echo "Hiding window titlebar..."
            sed -i 's/HideTitleBar=Never/HideTitleBar=Always/' "$HOME/.config/breezerc"
            echo "Reload KWin or change theme to apply changes..."
            exit 0
            ;;
        --enable-double-click)
            echo "Enabling double-click for Maui Apps..."
            sed -i 's/SingleClick=false/SingleClick=true/' "$HOME/.config/Maui/MauiMan.conf"
            echo "Reload KWin or change theme to apply changes..."
            exit 0
            ;;
        --disable-double-click)
            echo "Disabling double-click for Maui Apps..."
            sed -i 's/SingleClick=true/SingleClick=false/' "$HOME/.config/Maui/MauiMan.conf"
            echo "Reload KWin or change theme to apply changes..."
            exit 0
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            echo "Invalid argument: $1"
            usage
            exit 1
            ;;
    esac
fi
